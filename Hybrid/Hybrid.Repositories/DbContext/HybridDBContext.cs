// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace Hybrid.Repositories.Models;

public partial class HybridDBContext : DbContext
{
    public HybridDBContext()
    {
    }

    public HybridDBContext(DbContextOptions<HybridDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Course> Courses { get; set; }

    public virtual DbSet<Level> Levels { get; set; }

    public virtual DbSet<Minigame> Minigames { get; set; }

    public virtual DbSet<MinigameTemplate> MinigameTemplates { get; set; }

    public virtual DbSet<PaymentMethod> PaymentMethods { get; set; }

    public virtual DbSet<Rating> Ratings { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Student> Students { get; set; }

    public virtual DbSet<StudentAccomplisment> StudentAccomplisments { get; set; }

    public virtual DbSet<StudentSupscription> StudentSupscriptions { get; set; }

    public virtual DbSet<StudentTier> StudentTiers { get; set; }

    public virtual DbSet<SupscriptionExtentionOrder> SupscriptionExtentionOrders { get; set; }

    public virtual DbSet<Teacher> Teachers { get; set; }

    public virtual DbSet<TeacherSupscription> TeacherSupscriptions { get; set; }

    public virtual DbSet<TeacherTier> TeacherTiers { get; set; }

    public virtual DbSet<TransactionHistory> TransactionHistories { get; set; }

    public virtual DbSet<User> Users { get; set; }
    public static string GetConnectionString(string connectionStringName)
    {
        string envVarName = $"ConnectionStrings__DefaultConnection={connectionStringName}";
        string? connectionString = Environment.GetEnvironmentVariable(envVarName);

        if (string.IsNullOrEmpty(connectionString))
        {
            throw new InvalidOperationException($"Environment variable '{envVarName}' not found.");
        }

        return connectionString;
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Course>(entity =>
        {
            entity.ToTable("Course");

            entity.Property(e => e.CourseId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CourseName).IsRequired();
            entity.Property(e => e.LevelId)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.Level).WithMany(p => p.Courses)
                .HasForeignKey(d => d.LevelId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Course_Level");
        });

        modelBuilder.Entity<Level>(entity =>
        {
            entity.ToTable("Level");

            entity.Property(e => e.LevelId)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LevelName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Minigame>(entity =>
        {
            entity.ToTable("Minigame");

            entity.Property(e => e.MinigameId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CourseId)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MinigameName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.TeacherId)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TemplateId)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ThumbnailImage).IsUnicode(false);

            entity.HasOne(d => d.Course).WithMany(p => p.Minigames)
                .HasForeignKey(d => d.CourseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Minigame_Course");

            entity.HasOne(d => d.Teacher).WithMany(p => p.Minigames)
                .HasForeignKey(d => d.TeacherId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Minigame_Teacher");

            entity.HasOne(d => d.Template).WithMany(p => p.Minigames)
                .HasForeignKey(d => d.TemplateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Minigame_MinigameTemplate");
        });

        modelBuilder.Entity<MinigameTemplate>(entity =>
        {
            entity.HasKey(e => e.TemplateId);

            entity.ToTable("MinigameTemplate");

            entity.Property(e => e.TemplateId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Image).IsUnicode(false);
            entity.Property(e => e.TemplateName)
                .IsRequired()
                .HasMaxLength(255);
        });

        modelBuilder.Entity<PaymentMethod>(entity =>
        {
            entity.HasKey(e => e.MethodId);

            entity.ToTable("PaymentMethod");

            entity.Property(e => e.MethodId)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MethodName)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<Rating>(entity =>
        {
            entity.HasKey(e => new { e.StudentId, e.MinigameId });

            entity.ToTable("Rating");

            entity.Property(e => e.StudentId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MinigameId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.Minigame).WithMany(p => p.Ratings)
                .HasForeignKey(d => d.MinigameId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Rating_Minigame");

            entity.HasOne(d => d.Student).WithMany(p => p.Ratings)
                .HasForeignKey(d => d.StudentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Rating_Student");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.ToTable("Role");

            entity.Property(e => e.RoleId)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Student>(entity =>
        {
            entity.HasKey(e => e.UserId);

            entity.ToTable("Student");

            entity.Property(e => e.UserId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.TierId)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.Tier).WithMany(p => p.Students)
                .HasForeignKey(d => d.TierId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Student_StudentTier");

            entity.HasOne(d => d.User).WithOne(p => p.Student)
                .HasForeignKey<Student>(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Student_User");
        });

        modelBuilder.Entity<StudentAccomplisment>(entity =>
        {
            entity.HasKey(e => new { e.StudentId, e.MinigameId });

            entity.ToTable("StudentAccomplisment");

            entity.Property(e => e.StudentId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MinigameId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TakenDate).HasColumnType("datetime");

            entity.HasOne(d => d.Minigame).WithMany(p => p.StudentAccomplisments)
                .HasForeignKey(d => d.MinigameId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StudentAccomplisment_Minigame");

            entity.HasOne(d => d.Student).WithMany(p => p.StudentAccomplisments)
                .HasForeignKey(d => d.StudentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StudentAccomplisment_Student");
        });

        modelBuilder.Entity<StudentSupscription>(entity =>
        {
            entity.HasKey(e => new { e.StudentId, e.TierId, e.TransactionId });

            entity.ToTable("StudentSupscription");

            entity.Property(e => e.StudentId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TierId)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransactionId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.StartDate).HasColumnType("datetime");

            entity.HasOne(d => d.Student).WithMany(p => p.StudentSupscriptions)
                .HasForeignKey(d => d.StudentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StudentSupscription_Student");

            entity.HasOne(d => d.Tier).WithMany(p => p.StudentSupscriptions)
                .HasForeignKey(d => d.TierId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StudentSupscription_StudentTier");

            entity.HasOne(d => d.SupscriptionExtentionOrder).WithOne(p => p.StudentSupscription)
                .HasForeignKey<StudentSupscription>(d => new { d.StudentId, d.TierId, d.TransactionId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StudentSupscription_SupscriptionExtentionOrder");
        });

        modelBuilder.Entity<StudentTier>(entity =>
        {
            entity.HasKey(e => e.TierId);

            entity.ToTable("StudentTier");

            entity.Property(e => e.TierId)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.TierName)
                .IsRequired()
                .HasMaxLength(50)
                .IsFixedLength();
        });

        modelBuilder.Entity<SupscriptionExtentionOrder>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.TierId, e.TransactionId });

            entity.ToTable("SupscriptionExtentionOrder");

            entity.Property(e => e.UserId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TierId)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransactionId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.Transaction).WithMany(p => p.SupscriptionExtentionOrders)
                .HasForeignKey(d => d.TransactionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SupscriptionExtentionOrder_TransactionHistory");
        });

        modelBuilder.Entity<Teacher>(entity =>
        {
            entity.HasKey(e => e.UserId);

            entity.ToTable("Teacher");

            entity.Property(e => e.UserId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.TierId)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.Tier).WithMany(p => p.Teachers)
                .HasForeignKey(d => d.TierId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Teacher_TeacherTier");

            entity.HasOne(d => d.User).WithOne(p => p.Teacher)
                .HasForeignKey<Teacher>(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Teacher_User");
        });

        modelBuilder.Entity<TeacherSupscription>(entity =>
        {
            entity.HasKey(e => new { e.TeacherId, e.TierId, e.TransactionId });

            entity.ToTable("TeacherSupscription");

            entity.Property(e => e.TeacherId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TierId)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransactionId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.StartDate).HasColumnType("datetime");

            entity.HasOne(d => d.Teacher).WithMany(p => p.TeacherSupscriptions)
                .HasForeignKey(d => d.TeacherId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TeacherSupscription_Teacher");

            entity.HasOne(d => d.Tier).WithMany(p => p.TeacherSupscriptions)
                .HasForeignKey(d => d.TierId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TeacherSupscription_TeacherTier");

            entity.HasOne(d => d.SupscriptionExtentionOrder).WithOne(p => p.TeacherSupscription)
                .HasForeignKey<TeacherSupscription>(d => new { d.TeacherId, d.TierId, d.TransactionId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TeacherSupscription_SupscriptionExtentionOrder");
        });

        modelBuilder.Entity<TeacherTier>(entity =>
        {
            entity.HasKey(e => e.TierId);

            entity.ToTable("TeacherTier");

            entity.Property(e => e.TierId)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.TierName)
                .IsRequired()
                .HasMaxLength(50)
                .IsFixedLength();
        });

        modelBuilder.Entity<TransactionHistory>(entity =>
        {
            entity.HasKey(e => e.TransactionId);

            entity.ToTable("TransactionHistory");

            entity.Property(e => e.TransactionId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MethodId)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.Method).WithMany(p => p.TransactionHistories)
                .HasForeignKey(d => d.MethodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TransactionHistory_PaymentMethod");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.ToTable("User");

            entity.Property(e => e.UserId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.RefreshToken).HasMaxLength(512);
            entity.Property(e => e.RefreshTokenExpiryTime).HasColumnType("datetime");
            entity.Property(e => e.ResetCode)
                .HasMaxLength(100)
                .IsFixedLength();
            entity.Property(e => e.RoleId)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.Role).WithMany(p => p.Users)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_User_Role");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}